/*
 * Created by SharpDevelop.
 * User: Valentin
 * Date: 21/10/2025
 * Time: 18:08
 * 
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 */
using System;
using System.Collections.Generic;

namespace Proyecto_POO
{
	class Program
	{
		//agregar cuenta
		public static void CuentaNueva(Banco c)
		{
			bool NumeroInvalido = false;
			bool DniNoEncontrado = true;
			Cuenta p = new Cuenta("","","", 0);
			while(!NumeroInvalido){
				try{
					Console.WriteLine("Ingrese numero de cuenta:");
					p.Numero = Console.ReadLine();
					ValidarNumero(p.Numero, c);
					NumeroInvalido = true;
				}
				catch (NumeroIgualExcepction){
					Console.WriteLine("Ese numero de cuenta ya existe, intente nuevamente\n");
				}
			}
			Console.WriteLine("Ingrese su apellido");
			p.Apellido = Console.ReadLine();
			Console.WriteLine("Ingrese su DNI:");
			p.Dni = Console.ReadLine();
			
			foreach (Cliente r in c.listaClientes){
				if(r.Dni == p.Dni)
				{ 
					DniNoEncontrado = false;
				}
			}
			if  (DniNoEncontrado == true){
			
				Console.WriteLine("No existe en el sistema, debe agregarse como cliente nuevo\n");
				NuevoCliente(c, p.Dni, p.Apellido);
			}
			
			Console.WriteLine("Ingrese su saldo);
			p.Saldo = double.Parse(Console.ReadLine());
			c.AgregarCuenta(p);
			Console.WriteLine("¡Cuenta agregada con exito!");
		}
		
		static void ValidarNumero(string p, Banco c)
		{
			foreach(Cuenta d in c.listaCuentas)
			{
				if(p == d.Numero)
				{
					throw new NumeroIgualExcepction();
				}
			}
		}
		
		//si no hay cliente para esa cuenta, agregar cliente
		public static void NuevoCliente(Banco c, string dni, string apellido)
		{
			Cliente d = new Cliente("", apellido,"","","", dni);
			Console.WriteLine("Ingrese su nombre:");
			d.NombreC = Console.ReadLine();
			Console.WriteLine("Ingrese su dirección:");
			d.Direcccion = Console.ReadLine();
			Console.WriteLine("Ingrese su telefono:");
			d.Telefono = Console.ReadLine();
			Console.WriteLine("Ingrese su email:");
			d.Email = Console.ReadLine();
			c.AgregarCliente(d);
			Console.WriteLine("¡Cliente agregado con éxito!");
		}
		
		
		//eliminar cuenta
		public static void EliminarCuenta(Banco c)
		{
			Console.Write("Ingrese su número de cuenta: ");
			string numeroCuenta = Console.ReadLine();
			int cantidad = 0;
			string ayuda = "";
			Cuenta cuentaAEliminar = null;
			Cliente repuesto = null;
			
			foreach (Cuenta P in c.listaCuentas)
			{
				if (P.Numero == numeroCuenta)
				{
					cuentaAEliminar = P;
					ayuda = cuentaAEliminar.Dni;
				}
			}

			if (c.ExisteCuenta(cuentaAEliminar) == true)
			{
				c.EliminarCuentas(cuentaAEliminar);
				Console.WriteLine("Cuenta eliminada.");
			}
			else{
				Console.WriteLine("La cuenta no existe");
			}
			
			foreach(Cuenta r in c.listaCuentas)
			{
				if(ayuda == r.Dni)
				{
					cantidad++;
				}
			}

			if (cantidad == 0){
				foreach(Cliente m in c.listaClientes){
					if(ayuda == m.Dni){
						repuesto = m;
					}
				}
				if(ayuda == repuesto.Dni){
					EliminarCliente(c);
				}
			}
		}
		
		//no hay mas cuentas para ese cliente. Eliminar Cliente
		public static void EliminarCliente(Banco c)
		{
			Console.WriteLine("No hay mas Cuentas para este Cliente.\nIngrese su Dni (unico de cada Cliente): ");
			string dni = Console.ReadLine();
			Cliente clienteAEliminar = null;
			foreach(Cliente l in c.listaClientes){
				if(dni == l.Dni){
					clienteAEliminar = l;
				}
			}
			if (c.ExisteCliente(clienteAEliminar) == true){
				c.EliminarClientes(clienteAEliminar);
				Console.WriteLine("Cliente eliminado.");
			}
			else
			{
				Console.WriteLine("El cliente no existe.");
			}
		}
		
		//Listar clientes con mas de una cuenta
		
		public static void ListarClientes(Banco c)
		{
			Console.WriteLine("Clientes con mas de una cuenta: \n");
			bool halloClientes = false;
			foreach(Cliente e in c.listaClientes)
			{
				int cantidad = 0;
				
				foreach(Cuenta d in c.listaCuentas)
				{
					if(e.Dni == d.Dni)
					{
						cantidad++;
					}
				}
				
				if (cantidad > 1)
				{
					halloClientes = true;
					Console.WriteLine("Apellido: {0}, Dni: {1}, Cantidad de cuentas: {2}", e.ApellidoC, e.Dni, cantidad);
					
					foreach (Cuenta d in c.listaCuentas)
					{
						if (e.Dni == d.Dni)
						{
							Console.WriteLine("N° Cuenta: {0}, Saldo: ${1}", d.Numero, d.Saldo);
						}
					}
				}
			}
				if(halloClientes == false){
					Console.WriteLine("No hay clientes con multiples cuentas");
				}

		}
			
			//Extrar de una Cuenta			
			public static void ExtraerStatic(Banco c){
			Cuenta ayuda = null;
			bool saldoInf = false;
			double extraccion = 0;
			Console.WriteLine("Ingrese el numero de cuenta:");
			string num = Console.ReadLine();
			while(!saldoInf){
			try{
			Console.WriteLine("Ingrese el saldo a extraer");
			extraccion = double.Parse(Console.ReadLine());
			foreach(Cuenta e in c.listaCuentas){
				if (e.Numero == num){
					ayuda = e;
				}
			}
				ValidarSaldo(ayuda, extraccion);
				saldoInf = true;
				}
			catch (SaldoInsuficienteException){
				Console.WriteLine("Saldo insuficiente en cuenta {0} para realizar la operacion", ayuda.Numero);
				Console.WriteLine("Saldo disponible: " + ayuda.Saldo);
				Console.WriteLine("Intente nuevamente (si su saldo es 0, ingrese 0 al momento de realizar la extraccion)");
				}
			}
		
			if (c.ExisteCuenta(ayuda) == true){
				ayuda.ExtraerSaldo(extraccion);
				Console.WriteLine("Saldo restante: " + ayuda.Saldo);
			}
		}
		
		//Deposito en una cuenta
		public static void DepositarStatic(Banco c){
			Cuenta ayuda = null;
			Console.WriteLine("Ingrese el numero de cuenta:");
			string num = Console.ReadLine();
			Console.WriteLine("Ingrese el saldo a depositar");
			double deposito = double.Parse(Console.ReadLine());
			foreach(Cuenta e in c.listaCuentas){
				if (e.Numero == num){
					ayuda = e;
				}
			}
			if (c.ExisteCuenta(ayuda) == true){
				ayuda.DepositarSaldo(deposito);
				Console.WriteLine("Saldo actual: " + ayuda.Saldo);
			}
		}
		
		//Transferencia entre cuentas
		public static void TransferirStatic(Banco c){
			Cuenta ayuda = null;
			Cuenta ayudados = null;
			bool saldoInf = false;
			double transferencia = 0;
			Console.WriteLine("Ingrese el numero de su cuenta:");
			string restarnum = Console.ReadLine();
			Console.WriteLine("Ingrese el numero de la cuenta a trasferir:");
			string sumarnum = Console.ReadLine();	
			while(!saldoInf){
			try{
			Console.WriteLine("Ingrese el saldo a transferir");
			transferencia = double.Parse(Console.ReadLine());
			foreach(Cuenta e in c.listaCuentas){
				if (e.Numero == restarnum){
					ayuda = e;
				}
			}

			foreach(Cuenta e in c.listaCuentas){
				if (e.Numero == sumarnum){
					ayudados = e;
				}
			}
				ValidarSaldo(ayuda, transferencia);
				saldoInf = true;
				}
				catch (SaldoInsuficienteException){
				Console.WriteLine("Saldo insuficiente en cuenta {0} para realizar la operacion", ayuda.Numero);
				Console.WriteLine("Saldo disponible: " + ayuda.Saldo);
				Console.WriteLine("Intente nuevamente (si su saldo es 0, ingrese 0 al momento de realizar la transferencia)");
			}
			}
			
			if (c.ExisteCuenta(ayuda) == true){
				ayuda.ExtraerSaldo(transferencia);
				Console.WriteLine("Saldo restante de la cuenta {0}: {1} ", ayuda.Numero, ayuda.Saldo);
			}
			if (c.ExisteCuenta(ayudados) == true){
				ayudados.DepositarSaldo(transferencia);
				Console.WriteLine("Saldo de la cuenta {0}: {1}", ayudados.Numero, ayudados.Saldo);
			}
		}
		
			public static void ValidarSaldo(Cuenta p, double transferencia){
				if(transferencia > p.Saldo){
				throw new SaldoInsuficienteException();
				}
			}
			
			//Listado de Cuentas			
			public static void ListadoCuentas(Banco c)
			{
				if (c.CantidadCuentas() == 0)
				{
					Console.WriteLine("No hay cuentas registrados en el banco.");
					return;
				}
				foreach (Cuenta p in c.listaCuentas)
				{
					p.MostrarDatosP();
				}
			}
			
			//Listado de Clientes			
			public static void ListadoClientes(Banco c)
			{
				if (c.CantidadClientes() == 0)
				{
					Console.WriteLine("No hay clientes registrados en el banco.");
					return;
				}
				foreach (Cliente d in c.listaClientes)
				{
					d.MostrarDatos();
				}
			}
			
			public static void Main(string[] args)
			{
				string opcion;
				//invocamos variables generales para cada uno. Asi cumpliendo la composicion.
				Banco c = new Banco("Banco de los Programadores");
				//Listado de clientes , indicando nro de cuenta, apellido, dni y saldo de cada una
				/*Cliente d2 = new Cliente("Valentin","Molina","Av Italia","1127476774","gyokaro@gmail.com","11223344");
				Cuenta p21 = new Cuenta("02","Molina","11223344",11600);
				Cuenta p2 = new Cuenta("01","Molina","11223344",1600);
				Cliente d3 = new Cliente("Evelyn","Santa Cruz","Calle EE UU","1133190322","simpsonita@gmail.com", "55667788");
				Cuenta p3 = new Cuenta("11","Santa Cruz","55667788",40000);
				Cuenta p31 = new Cuenta("12","Santa Cruz","55667788",96500);
				Cliente d4 = new Cliente("Lautaro","Dufour","Av Serbia","1165172012","lautyduf@gmail.com","99001111");
				Cuenta p4 = new Cuenta("21","Dufour","99001111",8900);
				//agregamos los clientes con el metodo de Banco
				c.AgregarCliente(d2);
				c.AgregarCuenta(p2);
				c.AgregarCuenta(p21);
				c.AgregarCliente(d3);
				c.AgregarCuenta(p3);
				c.AgregarCuenta(p31);
				c.AgregarCliente(d4);
				c.AgregarCuenta(p4);*/
				
				do
				{
					Console.WriteLine("Bienvendio al "  + c.Nombre);
					Console.WriteLine("\n¿Qué desea hacer?" + "\na) Agregar una Cuenta." + "\nb) Eliminar una Cuenta." + "\nc) Lista de Clientes con más de una Cuenta." + "\nd) Realizar una Extracción." + "\ne) Realizar un Deposito." + "\nf) Transferir dinero entre Cuentas." + "\ng) Listado de Cuentas." + "\nh) Listado de Clientes." + "\ni) Salir.");
					opcion = Console.ReadLine().ToLower();
					switch (opcion)
					{
						case "a":
							Console.Clear();
							Console.WriteLine("Ejecutando: Agregar una Cuenta.");
							CuentaNueva(c);
							break;
						case "b":
							Console.Clear();
							Console.WriteLine("Ejecutando: Eliminar una Cuenta.");
							EliminarCuenta(c);
							break;
						case "c":
							Console.Clear();
							Console.WriteLine("Ejecutando: Lista de Clientes con más de una Cuenta.");
							ListarClientes(c);
							break;
						case "d":
							Console.Clear();
							Console.WriteLine("Ejecutando: Realizar una Extracción.");
							ExtraerStatic(c);
							break;
						case "e":
							Console.Clear();
							Console.WriteLine("Ejecutando: Realizar un Deposito.");
							DepositarStatic(c);
							break;
						case "f":
							Console.Clear();
							Console.WriteLine("Ejecutando: Transferir dinero entre Cuentas.");
							TransferirStatic(c);
							break;
						case "g":
							Console.Clear();
							Console.WriteLine("Ejecutando: Listado de Cuentas.");
							ListadoCuentas(c);
							break;
						case "h":
							Console.Clear();
							Console.WriteLine("Ejecutando: Listado de Clientes.");
							ListadoClientes(c);
							break;
						case "i":
							Console.Clear();
							Console.WriteLine("---SALIENDO---");
							Console.WriteLine("Presione cualquier tecla para continuar con el cierre del programa.");
							Console.ReadKey();
							break;
						default:
							Console.WriteLine("Eleccion Invalida. La entrada debe ser entre a-i");break;
					}
					
					if (opcion != "i")
					{
						Console.WriteLine("\nPresione cualquier tecla para continuar...");
						Console.ReadKey();
						Console.Clear();
					}
				}
				while(opcion != "i");
				Console.WriteLine("\n\nMuchas Gracias por confiar en nuestro servicio.");
				Console.WriteLine("\nPresione cualquier tecla para cerrar...");
				Console.ReadKey();
			}
			
		}
	}
