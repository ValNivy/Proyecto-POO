/*
 * Created by SharpDevelop.
 * User: Valentin
 * Date: 21/10/2025
 * Time: 18:08
 * 
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 */
using System;
using System.Collections.Generic;

namespace Proyecto_POO
{
	class Program
	{
		public static void Main(string[] args)
		{
			
			string opcion;
			
			//invocamos variables generales para cada uno. Asi cumpliendo la composicion.
			Banco c = new Banco("Banco de los Programadores");
			Cliente d = new Cliente("","","","","","");
			Cuenta p = new Cuenta("","","",0);
			//Listado de clientes , indicando nro de cuenta, apellido, dni y saldo de cada una
			Cliente d2 = new Cliente("Valentin","Molina","Av Italia","1127476774","gyokaro@gmail.com","11223344");
			Cuenta p21 = new Cuenta("02","Molina","11223344",11600);
			Cuenta p2 = new Cuenta("01","Molina","11223344",1600);
			Cliente d3 = new Cliente("Evelyn","Santa Cruz","Calle EE UU","1133190322","simpsonita@gmail.com", "55667788");
			Cuenta p3 = new Cuenta("11","Santa Cruz","55667788",40000);
			Cuenta p31 = new Cuenta("12","Santa Cruz","55667788",96500);
			Cliente d4 = new Cliente("Lautaro","Dufour","Av Serbia","1165172012","lautyduf@gmail.com","99001111");
			Cuenta p4 = new Cuenta("21","Dufour","47018550",8900);
			//agregamos los clientes con el metodo de Banco
			c.AgregarCliente(d2);
			c.AgregarCuenta(p2);
			c.AgregarCuenta(p21);
			c.AgregarCliente(d3);
			c.AgregarCuenta(p3);
			c.AgregarCuenta(p31);
			c.AgregarCliente(d4);
			c.AgregarCuenta(p4);
			
			
			
			do
			{
				Console.WriteLine("Bienvendio al "  + c.Nombre);
				Console.WriteLine("\n¿Qué desea hacer?" +
				                  "\na) Agregar una Cuenta." +
				                  "\nb) Eliminar una Cuenta." +
				                  "\nc) Lista de Clientes con más de una Cuenta." +
				                  "\nd) Realizar una Extracción." +
				                  "\ne) Realizar un Deposito." +
				                  "\nf) Transferir dinero entre Cuentas." +
				                  "\ng) Listado de Cuentas." +
				                  "\nh) Listado de Clientes." +
				                  "\ni) Salir.");
				
				opcion = Console.ReadLine().ToLower();
				switch (opcion)
				{
					case "a":
						Console.Clear();
						Console.WriteLine("Ejecutando: Agregar una Cuenta.");
						CuentaNueva(c, p, d);
						break;
					case "b":
						Console.Clear();
						Console.WriteLine("Ejecutando: Eliminar una Cuenta.");
						EliminarCuenta(c, p, d);
						break;
					case "c":
						Console.Clear();
						Console.WriteLine("Ejecutando: Lista de Clientes con más de una Cuenta.");
						ListarClientes(c);
						break;
					case "d":
						Console.Clear();
						Console.WriteLine("Ejecutando: Realizar una Extracción.");
						break;
					case "e":
						Console.Clear();
						Console.WriteLine("Ejecutando: Realizar un Deposito.");
						break;
					case "f":
						Console.Clear();
						Console.WriteLine("Ejecutando: Transferir dinero entre Cuentas.");
						break;
					case "g":
						Console.Clear();
						Console.WriteLine("Ejecutando: Listado de Cuentas.");
						ListadoCuentas(c);
						break;
					case "h":
						Console.Clear();
						Console.WriteLine("Ejecutando: Listado de Clientes.");
						ListadoClientes(c);
						break;
					case "i":
						Console.Clear();
						Console.WriteLine("---SALIENDO---");
						Console.WriteLine("Presione cualquier tecla para continuar con el cierre del programa.");
						Console.ReadKey();
						break;
					default:
						Console.WriteLine("Eleccion Invalida. La entrada debe ser entre a-i");
						break;
				}
				
				if (opcion != "i")
				{
					Console.WriteLine("\nPresione cualquier tecla para continuar...");
					Console.ReadKey();
					Console.Clear();
				}
			}
			while(opcion != "i");
			
			Console.WriteLine("\n\nMuchas Gracias por confiar en nuestro servicio.");
			Console.WriteLine("\nPresione cualquier tecla para cerrar...");
			Console.ReadKey();
		}
		
		
		//_____________________________________________________________________________________________________________________________________________________________________
		

		
		public static void CuentaNueva(Banco c, Cuenta p, Cliente d)
		{
			Console.WriteLine("Ingrese su numero:");
			p.Numero = Console.ReadLine();
			Console.WriteLine("Ingrese su apellido");
			p.Apellido = Console.ReadLine().ToLower();
			Console.WriteLine("Ingrese su DNI:");
			p.Dni = Console.ReadLine();
			
			if (c.ExisteCuenta(p) == false){
				Console.WriteLine("No tiene una cuenta, debe crearse un perfil de cliente nuevo.");
				NuevoCliente(c, d);
			}
			
			Console.WriteLine("Ingrese su saldo: ");
			p.Saldo = double.Parse(Console.ReadLine());
			c.AgregarCuenta(p);
			Console.WriteLine("¡Cuenta agregada con exito!");
		}
		
		public static void NuevoCliente(Banco c, Cliente d)
		{
			Console.WriteLine("Ingrese su nombre:");
			d.NombreC = Console.ReadLine().ToLower();
			Console.WriteLine("Ingrese su apellido");
			d.ApellidoC = Console.ReadLine().ToLower();
			Console.WriteLine("Ingrese su DNI:");
			d.Dni = Console.ReadLine();
			Console.WriteLine("Ingrese su dirección:");
			d.Direcccion = Console.ReadLine().ToLower();
			Console.WriteLine("Ingrese su telefono:");
			d.Telefono = Console.ReadLine().ToLower();
			Console.WriteLine("Ingrese su email:");
			d.Email = Console.ReadLine().ToLower();
			c.AgregarCliente(d);
			Console.WriteLine("¡Cliente agregado con éxito!");
		}
		
		public static void EliminarCuenta(Banco c, Cuenta p, Cliente d)
		{
			Console.WriteLine("Ingrese su numero de cuenta: ");
			p.Numero = Console.ReadLine();
			if (c.ExisteCuenta(p) == true)
			{
				c.EliminarCuentas(p);
				Console.WriteLine("Cuenta eliminada.");
			}
			else
			{
				Console.WriteLine("La cuenta no existe o el cliente no tiene más cuentas.");
				c.EliminarClientes(d);
			}
		}
		
		public static void EliminarCliente(Banco c, Cliente d)
		{
			Console.WriteLine("Ingrese su Dni (unico de cada Cliente): ");
			d.Dni = Console.ReadLine();
			if (c.ExisteCliente(d) == true)
			{
				c.EliminarClientes(d);
				Console.WriteLine("Cliente eliminado.");
			}
			else
			{
				Console.WriteLine("El Cliente no existe.");
				return;
			}
		}
		
		
		public static void ListarClientes(Banco c)
		{
			
			Console.WriteLine("Estos son los clientes con mas de una cuenta: \n");
			foreach(Cliente e in c.listaClientes)
			{
				int cantidad = 0;
				
				foreach(Cuenta d in c.listaCuentas)
				{
					if(e.Dni == d.Dni)
					{
						
						cantidad++;
					}
				}
				
				if (cantidad > 1)
				{
					
					Console.WriteLine("Apellido: {0}, Dni: {1}, Cantidad de cuentas: {2}", e.ApellidoC, e.Dni, cantidad);

					// mostrar los datos de cada cuenta del cliente
					foreach (Cuenta d in c.listaCuentas)
					{
						if (e.Dni == d.Dni)
						{
							Console.WriteLine(" ---> N° Cuenta: {0}, Saldo: ${1}", d.Numero, d.Saldo);
						}
					}
					
					if (cantidad < 2)
					{
						Console.WriteLine("No hay clientes con multiples cuentas");
					}
					
					
				}
			}
		}
				
				
				//Realizar una extracción. En caso de no poseer saldo suficiente se
				//debe levantar una excepción que indique lo sucedido (“Saldo insuficiente”)
				
				
				
				//Depositar dinero en una cuenta dada.
				
				
				
				//Transferir dinero entre dos cuentas. Validar existencia de saldo
				//en la cuenta origen
				
				
				
				//Listado de cuentas
				
				public static void ListadoCuentas(Banco c)
				{
					if (c.CantidadCuentas() == 0)
					{
						Console.WriteLine("No hay cuentas registrados en el banco.");
						return;
					}
					foreach (Cuenta p in c.listaCuentas)
					{
						p.MostrarDatosP();
					}
				}
				
				//Listado de clientes
				
				public static void ListadoClientes(Banco c)
				{
					if (c.CantidadClientes() == 0)
					{
						Console.WriteLine("No hay clientes registrados en el banco.");
						return;
					}
					foreach (Cliente d in c.listaClientes)
					{
						d.MostrarDatos();
					}
				}
			}
		}
